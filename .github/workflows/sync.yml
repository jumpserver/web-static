name: Sync Repository

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Build Version'
        required: true
        default: 'v4.0.0'
      upload_version:
        description: 'Upload Version'
        required: true
        default: 'resource-1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Prepare files
        run: |
          bash prepare.sh

      - name: Get pip_package.zip
        run: |
          rm -rf opt/player || echo ""
          applets_version=$(curl -s https://api.github.com/repos/jumpserver/applets/releases/latest | grep "tag_name" | awk '{print $2}' | sed 's/"//g' | sed 's/,//g')
          wget -qO opt/download/applets/pip_packages_${applets_version}.zip https://github.com/jumpserver/applets/releases/download/${applets_version}/pip_packages.zip

      - name: Set git config
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Create Tag
        run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag -a ${{ github.event.inputs.version }} -m "Release Version ${{ github.event.inputs.version }}" || echo "Tag already exists"
          git push origin ${{ github.event.inputs.version }} || echo "Tag already exists"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        run: |
          gh release create ${{ github.event.inputs.version }} --notes "Release ${{ github.event.inputs.version }}" || echo "Release already exists"
          gh release upload ${{ github.event.inputs.upload_version }} opt/download/applets/* --clobber
          gh release upload ${{ github.event.inputs.upload_version }} opt/download/public/* --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup OSSUTIL
        uses: yizhoumo/setup-ossutil@v2
        with:
          endpoint: ${{ secrets.OSS_ENDPOINT }}
          access-key-id: ${{ secrets.OSS_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
          ossutil-version: 'latest'
      
      - name: Upload Assets to OSS
        run: |
          ossutil mkdir oss://jms-pkg/jumpserver/web-static/releases/download/${{ github.event.inputs.upload_version }}/ || echo "Path already exists"
          ossutil cp -r opt/download/applets/ oss://jms-pkg/jumpserver/web-static/releases/download/${{ github.event.inputs.upload_version }}/ --update
          ossutil cp -r opt/download/public/ oss://jms-pkg/jumpserver/web-static/releases/download/${{ github.event.inputs.upload_version }}/ --update